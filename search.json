[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to CONTRIBUTING.md","title":"Contributing to CONTRIBUTING.md","text":"First , thanks taking time contribute! types contributions encouraged valued. See Table Contents different ways help details project handles . Please make sure read relevant section making contribution. make lot easier us maintainers smooth experience involved. community looks forward contributions. like project, just don’t time contribute, ’s fine. easy ways support project show appreciation, also happy : - Star project - Refer project project’s readme - Mention project local meetups tell friends/colleagues - Cite packages published works","code":""},{"path":"/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Contributing to CONTRIBUTING.md","text":"Question Want Contribute Reporting Bugs Suggesting Enhancements First Code Contribution Improving Documentation Styleguides Commit Messages Join Project Team","code":""},{"path":"/CONTRIBUTING.html","id":"i-have-a-question","dir":"","previous_headings":"","what":"I Have a Question","title":"Contributing to CONTRIBUTING.md","text":"want ask question, assume read available Documentation. ask question, best search existing Issues might help . case found suitable issue still need clarification, can write question issue. also advisable search internet answers first. still feel need ask question need clarification, recommend following: Open Issue. Provide much context can ’re running . Provide project platform versions , depending seems relevant. take care issue soon possible.","code":""},{"path":"/CONTRIBUTING.html","id":"i-want-to-contribute","dir":"","previous_headings":"","what":"I Want To Contribute","title":"Contributing to CONTRIBUTING.md","text":"contributing project, must agree authored 100% content, necessary rights content content contribute may provided project license.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"before-submitting-a-bug-report","dir":"","previous_headings":"I Want To Contribute > Reporting Bugs","what":"Before Submitting a Bug Report","title":"Contributing to CONTRIBUTING.md","text":"good bug report shouldn’t leave others needing chase information. Therefore, ask investigate carefully, collect information describe issue detail report. Please complete following steps advance help us fix potential bug fast possible. Make sure using latest version. Determine bug really bug error side e.g. using incompatible environment components/versions (Make sure read documentation. looking support, might want check section). see users experienced (potentially already solved) issue , check already bug report existing bug error bug tracker. Also make sure search internet see users outside GitHub community discussed issue. Collect information bug: Stack trace (Traceback) OS, Platform Version (Windows, Linux, macOS, x86, ARM) Version interpreter, compiler, SDK, runtime environment, package manager, depending seems relevant. Possibly input output Can reliably reproduce issue? can also reproduce older versions?","code":""},{"path":"/CONTRIBUTING.html","id":"how-do-i-submit-a-good-bug-report","dir":"","previous_headings":"I Want To Contribute > Reporting Bugs","what":"How Do I Submit a Good Bug Report?","title":"Contributing to CONTRIBUTING.md","text":"must never report security related issues, vulnerabilities bugs including sensitive information issue tracker, elsewhere public. Instead sensitive bugs must sent email robert_baker@nps.gov. use GitHub issues track bugs errors. run issue project: Open Issue. (Since can’t sure point whether bug , ask talk bug yet label issue.) Explain behavior expect actual behavior. Please provide much context possible describe reproduction steps someone else can follow recreate issue . usually includes code. good bug reports isolate problem create reduced test case. See https://gist.github.com/hadley/270442 great run create reproducible examples. Provide information collected previous section. ’s filed: project team label issue accordingly. team member try reproduce issue provided steps. reproduction steps obvious way reproduce issue, team ask steps mark issue needs-repro. Bugs needs-repro tag addressed reproduced. team able reproduce issue, marked needs-fix, well possibly tags, issue left implemented someone development team. may also address issue issue pull request, reviewed development team.","code":""},{"path":"/CONTRIBUTING.html","id":"suggesting-enhancements","dir":"","previous_headings":"I Want To Contribute","what":"Suggesting Enhancements","title":"Contributing to CONTRIBUTING.md","text":"section guides submitting enhancement including completely new features minor improvements existing functionality. Following guidelines help maintainers community understand suggestion find related suggestions.","code":""},{"path":"/CONTRIBUTING.html","id":"before-submitting-an-enhancement","dir":"","previous_headings":"I Want To Contribute > Suggesting Enhancements","what":"Before Submitting an Enhancement","title":"Contributing to CONTRIBUTING.md","text":"Make sure using latest version. Read documentation carefully find functionality already covered, maybe individual configuration. Perform search see enhancement already suggested. , add comment existing issue instead opening new one. Find whether idea fits scope aims project. ’s make strong case convince project’s developers merits feature. Keep mind want features useful majority users just small subset. ’re just targeting minority users, consider writing add-/plugin library package. Please consult developers like create add-package. Maybe can help!","code":""},{"path":"/CONTRIBUTING.html","id":"how-do-i-submit-a-good-enhancement-suggestion","dir":"","previous_headings":"I Want To Contribute > Suggesting Enhancements","what":"How Do I Submit a Good Enhancement Suggestion?","title":"Contributing to CONTRIBUTING.md","text":"Enhancement suggestions tracked GitHub issues. Use clear descriptive title issue identify suggestion. Provide step--step description suggested enhancement many details possible. Describe current behavior explain behavior expected see instead . point can also tell alternatives work . may want include screenshots animated GIFs help demonstrate steps point part suggestion related . good free software generating GIFs across major operating systems. Explain enhancement useful users. may also want point projects solved better serve inspiration.","code":""},{"path":"/CONTRIBUTING.html","id":"your-first-code-contribution","dir":"","previous_headings":"I Want To Contribute","what":"Your First Code Contribution","title":"Contributing to CONTRIBUTING.md","text":"like contribute code please make adjustments issue pull request. development team review code prior merging pull request. issuing pull request make sure: 1) added description changes made changelog NEWS.md 2) added function, make sure also include unit tests cover function. changed function, make sure unit tests still pass. 3) added changed function, make sure package loads using devtools::load_all(). 2) updated necessary documentation using devtools::document() 3) updated associated web pages using pkgdown::build_site_github_pages() 4) checked errors warnings package built using devtools::check().","code":""},{"path":"/CONTRIBUTING.html","id":"styleguides","dir":"","previous_headings":"","what":"Styleguides","title":"Contributing to CONTRIBUTING.md","text":"encourage use tidyverse style guide.","code":""},{"path":"/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"Styleguides","what":"Commit Messages","title":"Contributing to CONTRIBUTING.md","text":"Commit messages short descriptive.","code":""},{"path":"/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to CONTRIBUTING.md","text":"guide based contributing.md. Make !","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 DPchecker authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/DPchecker.html","id":"install-dp-checker","dir":"Articles","previous_headings":"","what":"Install DP checker","title":"DPchecker","text":"can install DPchecker part NPSdataverse using:","code":"install.packages(\"devtools\") devtools::install_github(\"nationalparkservice/NPSdataverse\") library(NPSdataverse)"},{"path":[]},{"path":"/articles/DPchecker.html","id":"the-entire-package","dir":"Articles","previous_headings":"Check a data package","what":"The entire package","title":"DPchecker","text":"common use case DPchecker run single function, run_congruence_checks() run DPchecker tests . need fully constructed data package single folder consisting : * EML-formatted metadata file name ends _metadata.xml * UTF-8 encoded .csv files also need supply path data package. using Rstudio started new project, can put data package folder Rproject folder tell R find : data package somewhere else hard drive, describe path data package folder. example, data package folder folder called “nps_data” located Downloads folder (“username” username):","code":"run_congruence_checks(\"my_data_package_folder\") dp <- \"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp)"},{"path":"/articles/DPchecker.html","id":"metadata-only","dir":"Articles","previous_headings":"Check a data package","what":"Metadata only","title":"DPchecker","text":"cases, may want check just EML metadata file completeness without checking whether properly coincides data files (perhaps trouble shooting metadata issue sent just metadata file check). case, can restrict run_congruence_checks() function just check metadata elements:","code":"# In this case \"my_data_package_folder\" need only contain the metadata file but could include .csvs dp <- \"C:/Users/username/Downloads/my_data_package_folder\" run_congruence_checks(dp, check_metadata_only = TRUE)"},{"path":"/articles/DPchecker.html","id":"generate-a-log-file","dir":"Articles","previous_headings":"Check a data package","what":"Generate a log file","title":"DPchecker","text":"want generate log file run_congruence_checks() results can . log file may useful collaborating trouble shooting may simply handy records. Log files included data package upload. log file written directory Rproject default, can also specify directory saved .","code":"# save log file to current working directory: run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\")  # save the log file to another directory: save_here <- \"C:/Users/username/Documents\" run_congruence_checks(dp, output_filename = \"congruence_log_YYYY-MM-DD\", output_dir = save_here)"},{"path":"/articles/DPchecker.html","id":"interpreting-results","dir":"Articles","previous_headings":"","what":"Interpreting results","title":"DPchecker","text":"DPchecker tests designed help data package creators produce high quality, complete data packages can fully leverage DataStore’s ability ingest machine-readable metadata, maximally useful downstream data users. set tests also useful data package reviewers. Passing test indicated green check mark (✓\\checkmark). test fails, may fail error (red ×\\times) warning (yellow exclamation mark, !). Errors must addressed prior upload. Please modify data package DPchecker return errors. Warnings helpful indications data package creator may want look something. may wrong, might unusual. instance, data package lacked taxonomic geographic coverage fail taxonomic geographic coverage test warning lacking taxonomy geography unusual, may incorrect. Warnings may also used alert data package creators best practices - instance abstract less 20 words long test produce warning suggesting data package creator consider writing informative abstract.","code":""},{"path":"/articles/DPchecker.html","id":"tests-conducted","dir":"Articles","previous_headings":"","what":"Tests conducted","title":"DPchecker","text":"DPchecker v0.3.2 runs two types tests: metadata tests tests determine whether metadata data files congruent. Metadata tests can broken two sub-categories, metadata compliance metadata completeness. tests run order run listed .","code":""},{"path":"/articles/DPchecker.html","id":"metadata-compliance","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata compliance","title":"DPchecker","text":"tests determine whether metadata schema valid adheres rules data packages. require *_metadata.xml file run require data files present. include: metadata file schema valid (test_validate_schema()) filename used exactly metadata (test_dup_meta_entries()) version EML supported (test_metadata_version() Metadata indicates data file single-character field delimiter (test_delimiter()) Metadata indicates data file contains exactly one header row (test_header_num()) Metadata indicates data files footers (test_footer()) Metadata contains taxonomic coverage element (test_taxonomic_cov()) Metadata contains geographic coverage element (test_geographic_cov()) Metadata contain NPS content unit links (test_content_units()) Metadata contains Digital Object Identifier (DOI) (test_doi()) Metadata DOI properly formatted (test_doi_format()) Metadata contains URLs data table (test_datatable_urls) Metadata URLs properly formatted correspond DOI indicated metadata (test_datatable_urls_doi) Metadata contains publisher element (test_publisher()) Metadata indicates data column names begin letter contain spaces special characters (test_valid_fieldnames()) Metadata indicates file names letter contain special characters spaces. (test_valid_filenames()) Metadata contains emails, .gov emails (test_pii_meta_emails())","code":""},{"path":"/articles/DPchecker.html","id":"eml-elements-required-for-datastore","dir":"Articles","previous_headings":"Tests conducted","what":"EML elements required for DataStore:","title":"DPchecker","text":"tests ensure EML elements necessary DataStore properly extract metadata populate reference exist, correct location, properly formatted. elements also often aspects metadata passed repositories search engines DataCite data.gov google’s dataset search. Therefore, checks may throw warnings suggestions best practices - removing stray characters abstracts suggesting informative title title unusually short. Required EML element tests require *_metadata.xml file run require data files present. Creator element exists individual creators exist, valid (<3 words) surNames (test_creator()) Publication date present correct ISO-8601 format (test_pub_date()) Data package title present metadata (test_dp_title()) Data package metadata contains least one keyword (test_keywords()) Metadata states data created NPS (test_by_for_nps()) Metadata indicates publisher National Park Service (test_publisher_name()) Metadata indicates publisher state CO (test_publisher_state()) Metadata indicates publisher city Fort Collins (test_publisher_city()) Metadata contains well formatted abstract data package (test_dp_abstract()) Metadata contains well formatted methods section data package (test_methods()) dataTables listed metadata unique file description (test_file_descript()) Metadata contains valid CUI code (test_cui_dissemination()) Metadata contains valid license name (test_license()) Metadata contains Intellectual Rights statement (test_int_rights() attributes listed metadata attribute definitions (test_attribute_defs()) attributes listed metadata storage types associated (test_storage_type()) attribute storage types valid values (test_storage_type())","code":""},{"path":"/articles/DPchecker.html","id":"recommended-eml-elements","dir":"Articles","previous_headings":"Tests conducted","what":"Recommended EML elements","title":"DPchecker","text":"elements aren’t required. missing, tests generate warning can choose ignore. However, included elements, please resolve errors submitting data package. individual Creators ORCiD associated (test_orcid_exists()) ORCiDs properly formatted (test_orcid_format()) ORCiDs resolve ORCiD profile (test_orcid_resolves()) ORCiDs resolve ORCiD profile matches Creator’s last name (test_orcid_match()) metadata contains well formatted additionalInfo (“Notes” DataStore) section (test_notes()) metadata contains DataStore Project reference “projects”(test_project())","code":""},{"path":"/articles/DPchecker.html","id":"metadata-and-data-congruence","dir":"Articles","previous_headings":"Tests conducted","what":"Metadata and Data Congruence","title":"DPchecker","text":"functions check make sure values fields metadata file accurately corresponds data files supplied. test require entire data package - *_metadata.xml file data files (*.csv) must present. data files listed metadata metadata file names refer data files (test_file_name_match()) columns data match columns metadata (test_fields_match()) NAs (missing data) properly accounted metadata (test_missing_data()) Columns indicated numeric metadata contain numeric values missing value codes data (test_numeric_fields()) Columns indicated dates metadata matching date formats metadata data. checks cell date column format provided metadata can take time larger data packages (test_dates_parse()) Columns indicated dates metadata contain values fall within stated temporal coverage metadata (test_date_range())","code":""},{"path":"/articles/DPchecker.html","id":"data-and-metadata-compliance","dir":"Articles","previous_headings":"Tests conducted","what":"Data and Metadata Compliance","title":"DPchecker","text":"functions check data metadata files compliance. Please resolve errors uploading data. Data files contain email addresses constitute personally identifiable information (PII) (test_pii_data_emails()","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rob Baker. Maintainer, author. Sarah E. Wright. Author. Issac Quevedo. Contributor. Amelia Sherman. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker R, Wright SE (2025). DPchecker: Checks Data Packages Congruence. R package version 1.1.0, https://github.com/nationalparkservice/DPchecker.","code":"@Manual{,   title = {DPchecker: Checks Data Packages for Congruence},   author = {Rob Baker and Sarah E. Wright},   year = {2025},   note = {R package version 1.1.0},   url = {https://github.com/nationalparkservice/DPchecker}, }"},{"path":"/index.html","id":"dpchecker","dir":"","previous_headings":"","what":"Checks Data Packages for Congruence","title":"Checks Data Packages for Congruence","text":"DPchecker (Data Package checker) package series functions NPS data package authors reviewers check internal consistency among data/meta data data package standards. Currently, EML metadata .csv data files supported. recommended store data files single metadata file (filename must end “metadata.xml”) directory. function runs single check imports data metadata necessary. prefer run checks , can use run_congruence_checks().","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Checks Data Packages for Congruence","text":"can install development version DPchecker GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"nationalparkservice/DPchecker\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples:","title":"Checks Data Packages for Congruence","text":"Run checks : Verify file names column names metadata match data:","code":"library(DPchecker)  # Get the directory where example data is stored (alternately, replace this with the path to your data folder)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  # Run all checks and summarize results  run_congruence_checks(dir)  # Alternately, if your data package is stored in the root of your R project folder, you don't need to pass any arguments run_congruence_checks() library(DPchecker)  dir <- DPchecker_example(\"BICY_veg\")  # Use this to test things out with the included example data # dir <- \"C:/Users/yourusername/Documents/my_data_package\"  # The path to your data package should look something like this  test_file_name_match(dir) test_fields_match(dir)"},{"path":"/reference/DPchecker-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Allows user (reviewer) check data package test whether meets congruence standards set forth NPS upload DataStore datapackage.","code":""},{"path":[]},{"path":"/reference/DPchecker-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DPchecker: Checks Data Packages for Congruence — DPchecker-package","text":"Maintainer: Rob Baker robert_baker@nps.gov (ORCID) Authors: Sarah E. Wright sarah_wright@nps.gov contributors: Issac Quevedo [contributor] Amelia Sherman [contributor]","code":""},{"path":"/reference/DPchecker_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate path to example data — DPchecker_example","title":"Generate path to example data — DPchecker_example","text":"Generate path example data","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example(dp_name = c(\"BICY_veg\", \"BUIS_herps\"))"},{"path":"/reference/DPchecker_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate path to example data — DPchecker_example","text":"dp_name Name data package.","code":""},{"path":"/reference/DPchecker_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate path to example data — DPchecker_example","text":"Path example data, dp_name specified.","code":""},{"path":"/reference/DPchecker_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate path to example data — DPchecker_example","text":"","code":"DPchecker_example() #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"/home/runner/work/_temp/Library/DPchecker/extdata/BICY_veg\" DPchecker_example(\"BUIS_herps\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. #> [1] \"/home/runner/work/_temp/Library/DPchecker/extdata/BUIS_herps\""},{"path":"/reference/is_eml.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if metadata is eml object — is_eml","title":"Check if metadata is eml object — is_eml","text":"Helper function validate argument belongs emld class.","code":""},{"path":"/reference/is_eml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if metadata is eml object — is_eml","text":"","code":"is_eml(metadata)"},{"path":"/reference/is_eml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if metadata is eml object — is_eml","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data — load_data","title":"Load Data — load_data","text":"load_data() inspects working directory data files. Loads existing data files tibble.","code":""},{"path":"/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data — load_data","text":"","code":"load_data(directory = here::here())"},{"path":"/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data — load_data","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory.","code":""},{"path":"/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data — load_data","text":"tibble .csvs","code":""},{"path":"/reference/load_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data — load_data","text":"loads data files specified directory (default working directory) tibble later use congruence checking. Returns user working directory upon exit. Currently supports .csv files.","code":""},{"path":"/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Data — load_data","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_data <- load_data(data_pkg_dir)"},{"path":"/reference/load_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Metadata — load_metadata","title":"Load Metadata — load_metadata","text":"load_metadata() loads metadata file given path directory.","code":""},{"path":"/reference/load_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Metadata — load_metadata","text":"","code":"load_metadata(directory = here::here(), inform_success = FALSE)"},{"path":"/reference/load_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Metadata — load_metadata","text":"directory directory metadata file found - .e. data package. Defaults current project directory. inform_success Boolean indicating whether display message metadata successfully loaded.","code":""},{"path":"/reference/load_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Metadata — load_metadata","text":"R-object formatted EML metadata.","code":""},{"path":"/reference/load_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Metadata — load_metadata","text":"Given path directory - default working directory -  load_metadata() looks files ending *_metadata.xml. function quits error tells user files found one file found. one metadata file found, checked one 3 formats: FGDC, ISO, EML. Currently EML supported function fail error, inform user, quit non-EML metadata found. EML metadata file loaded R's work space future use congruence checking. context National Park Service data packages, function can slightly easier use loading metadata R EML::read_eml() require filename type specified.","code":""},{"path":"/reference/load_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Metadata — load_metadata","text":"","code":"data_pkg_dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. my_metadata <- load_metadata(data_pkg_dir)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. QCkit convert_datetime_format","code":""},{"path":"/reference/run_congruence_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all congruence checks — run_congruence_checks","title":"Run all congruence checks — run_congruence_checks","text":"Run congruence checks","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all congruence checks — run_congruence_checks","text":"","code":"run_congruence_checks(   directory = here::here(),   metadata = load_metadata(directory),   check_metadata_only = FALSE,   skip_cols = NA,   output_filename,   output_dir = here::here() )"},{"path":"/reference/run_congruence_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all congruence checks — run_congruence_checks","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. check_metadata_only run checks metadata skip anything involving data files. skip_cols String. Defaults NA. list one columns data skip testing whether dates within data fall within dates range specified metadata. Useful , instance, columns within data associated QA/QC process dates expected fall outside date range specified data. output_filename Optional. specified, saves results congruence checks file. omitted, prints results console. file already exists, results appended existing file. output_dir Location save output file, using.","code":""},{"path":"/reference/run_congruence_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all congruence checks — run_congruence_checks","text":"Invisibly returns metadata.","code":""},{"path":"/reference/run_congruence_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all congruence checks — run_congruence_checks","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. run_congruence_checks(dir) #>  #> ── Running all congruence checks ─────────────────────────────────────────────── #>  #> ── Reading metadata ── #>  #> ── Checking metadata compliance ── #>  #> ✔ Your metadata is schema valid. #> ✔ Each data file name is used exactly once in the metadata file. #> ✔ Your EML version is supported. #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character #> ✔ Metadata indicates that each data file contains exactly one header row. #> ✔ Metadata indicates data files do not have footers. #> ✔ Metadata contains taxonomic coverage element. #> ✔ Metadata contains geographic coverage element #> ! Metadata does not contain park content unit links., Use #> `EMLeditor::set_content_units()` to add content unit links. #> ✔ Metadata contains a digital object identifier, \"doi: #>   https://doi.org/10.57830/2295086\". #> ✔ Metadata Digital Object Identifier appears to be properly formatted. #> ✔ Metadata contains URLs for all data tables. #> ✔ Data table URLs are properly formmatted and correspond to the specified DOI. #> ! One or more of data file URLs elements in metadata lack attributes. Either #> use `EMLeditor::set_data_urls()` to add the appropriate attribute for DataStore #> or make sure the URL provided is a direct download link. #> ✔ Metadata contains publisher element. #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters. #> ✔ File names begin with a letter and do not contain spaces or special #>   characters. #> ✔ Metadata does not appear to contain any personal emails. #>  #> ── Checking that metadata contains required elements for DataStore extraction ── #>  #> ✔ Any individual Creators in metadata have a surNames with less than three #>   words. #> ! Publication date, 2022, predates the Data Package Reference Type. #> ✔ Data package title is present in metadata. #> ✔ Metadata contains keyword(s). #> ✔ Metadata states data was created by or for NPS. #> ✔ Metadata indicates the publisher is the National Park Service. #> ✔ Metadata indicates the publisher state is CO. #> ✔ Metadata indicates the publisher city is Fort Collins. #> ! The data package abstract contains non-standard characters: &amp;#13;. Use #> `EMLeditor::set_abstract()` to revise. #> ! The metadata methods contains non-standard characters such as \\r or #> &amp;#13;. Use `EMLeditor::set_methods()` to revise. #> ✔ All dataTables listed in metadata have a unique file description. #> ! Data file 3 description is greater than 15 words. Consider a more concise #> description. #> ✖ The CUI dissemination code PUBVER is not a valid code. Use #>   `EMLeditor::set_cui()`. #> ✖ Metadata does not contain a license name. Use `EMLeditor::set_int_rights()` #>   to add a license name. #> ✔ Metadata contains an Intellectual Rights statement. #> ✔ All attributes listed in metadata have attribute definitions. #> ✔ All attributes listed in metadata have a storage type associated with them. #> ✔ All attribute storage types are valid values. #>  #> ── Checking additional/optional metadata elements ── #>  #> ✔ All individual creators have associated ORCiDs. #> ✔ All Creator ORCiDs are properly formatted. #> ✔ All Creator ORCiDs resolved to a valid ORCiD profile. #> ✔ All Creator ORCiDs resolve to an ORCiD profile that matches the Creator last #>   name. #> ! Metadata does not contain additionalInfo (notes). Use #> `EMLeditor::set_additional_info()` to add notes. #> ! No project associated with the metadata. To add a DataStore project, use #> `EMLeditor::set_project()`. #>  #> ── Checking that metadata is consistent with data file(s) ── #>  #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files. #> ✔ All columns in data match all columns in metadata. #> ✖ Undocumented missing data detected. Please document all missing data in #>   metadata: #>   ---> Mini_BICY_Veg_Intercept_Cleaned.csv contains missing data without a #>   corresponding missing data code in metadata. #>   ---> Mini_BICY_Veg_Transect_Cleaned.csv contains missing data without a #>   corresponding missing data code in metadata. #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes. #> ✔ Metadata and data date formatting is in congruence. #> ✔ Columns indicated as date/time in metadata are within the stated temporal #>   coverage range. #>  #> ── Checking data and metadata compliance ── #>  #> ✔ Data files do not appear to contain any personal emails. #>  #> ── Summary ── #>  #> ✖ 3 errors to address #> ! 8 warnings to look into"},{"path":"/reference/test_attribute_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Test metadata for attribute definitions — test_attribute_defs","title":"Test metadata for attribute definitions — test_attribute_defs","text":"test_attribute_defs() extracts attributeNames attributeDefinitions EML metadata. tests make sure number attributeNames attributeDefinitions. true, test passes. , fails error. test looks metadata, look data files. Passing test mean data columns attributes metadata associated . test , see test_fields_match().","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"test_attribute_defs(metadata = load_metadata(directory))"},{"path":"/reference/test_attribute_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test metadata for attribute definitions — test_attribute_defs","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_attribute_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test metadata for attribute definitions — test_attribute_defs","text":"invisibly returns metadata","code":""},{"path":"/reference/test_attribute_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test metadata for attribute definitions — test_attribute_defs","text":"","code":"if (FALSE) { # \\dontrun{ test_attribute_defs() } # }"},{"path":"/reference/test_by_for_nps.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for ","title":"Test for ","text":"Test \"NPS\"","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for ","text":"","code":"test_by_for_nps(metadata = load_metadata(directory))"},{"path":"/reference/test_by_for_nps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for ","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_by_for_nps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for ","text":"invisibly returns metadata","code":""},{"path":"/reference/test_by_for_nps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for ","text":"test_by_for_nps() test presence \"NPS\" field. test fails error information missing metadata. test fails warning metadata indicate data created NPS (expected relatively rare). Otherwise test passes.","code":""},{"path":"/reference/test_by_for_nps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for ","text":"","code":"if (FALSE) { # \\dontrun{ test_by_for_nps() } # }"},{"path":"/reference/test_content_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for content unit links — test_content_units","title":"Test for content unit links — test_content_units","text":"Test content unit links","code":""},{"path":"/reference/test_content_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for content unit links — test_content_units","text":"","code":"test_content_units(metadata = load_metadata(directory))"},{"path":"/reference/test_content_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for content unit links — test_content_units","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_content_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for content unit links — test_content_units","text":"invisible(metadata)","code":""},{"path":"/reference/test_content_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for content unit links — test_content_units","text":"","code":"if (FALSE) { # \\dontrun{ test_content_units() } # }"},{"path":"/reference/test_creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of creator and surName — test_creator","title":"Test for presence of creator and surName — test_creator","text":"test_creator() examines Creator element metadata. creator element missing, test fails error. creator element present, function looks individual creators. individual creators present lacks surName, test fails error. individual creators surName two words, test fails warning. Otherwise, test passes.","code":""},{"path":"/reference/test_creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of creator and surName — test_creator","text":"","code":"test_creator(metadata = load_metadata(directory))"},{"path":"/reference/test_creator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of creator and surName — test_creator","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_creator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of creator and surName — test_creator","text":"invisible(metadata)","code":""},{"path":"/reference/test_creator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of creator and surName — test_creator","text":"","code":"if (FALSE) { # \\dontrun{ test_creator() } # }"},{"path":"/reference/test_cui_dissemination.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for CUI dissemination code — test_cui_dissemination","title":"Test for CUI dissemination code — test_cui_dissemination","text":"test_cui_dissemination() examines EML metadata presence Controlled Unclassified Information (CUI) dissemination code. function fails error code exist match list valid codes. valid code \"PUBLIC\" test produce warning. valid code results pass.","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"test_cui_dissemination(metadata = load_metadata(directory))"},{"path":"/reference/test_cui_dissemination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for CUI dissemination code — test_cui_dissemination","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_cui_dissemination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for CUI dissemination code — test_cui_dissemination","text":"invisibly returns metadata","code":""},{"path":"/reference/test_cui_dissemination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for CUI dissemination code — test_cui_dissemination","text":"","code":"if (FALSE) { # \\dontrun{ test_cui_dissemination() } # }"},{"path":"/reference/test_datatable_url_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","title":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","text":"test_datatable_url_attributes tests whether 'function =' attribute  element data table metadata properly specified. attribute, function assumed direct download (per EML schema). user warned check case (data packages DataStore typically direct download link data file). specified attribute either \"information\" \"download\", function throw error allowable attributes. attribute \"download\" function warn user ask double check . attribute \"information\" correspond DataStore reference profile, function warn user ask check . attribute \"information\" DataStore reference profile page supplied, test pass.","code":""},{"path":"/reference/test_datatable_url_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","text":"","code":"test_datatable_url_attributes(metadata = load_metadata(directory))"},{"path":"/reference/test_datatable_url_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_datatable_url_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","text":"invisible(metadata)","code":""},{"path":"/reference/test_datatable_url_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for the appropriate attribute for data table URLs in metadata — test_datatable_url_attributes","text":"","code":"if (FALSE) { # \\dontrun{ test_datatable_url_attributes(metadata) } # }"},{"path":"/reference/test_datatable_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for consistency in data file URLs — test_datatable_urls","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"test_datatable_urls Checks make sure URLs listed data files correctly correspond DOI metadata. last 7 digits URL data tables identical last 7 digits DOI, test passes. DOI, test fails warning. data table lacks URL, test fails error. data table URL's last 7 digits identical DOI's last 7 digits, test fails error.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"test_datatable_urls(metadata = load_metadata(directory))"},{"path":"/reference/test_datatable_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_datatable_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"invisible(metadata)","code":""},{"path":"/reference/test_datatable_urls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"suggestions functions use correct errors/warnings provided.","code":""},{"path":"/reference/test_datatable_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for consistency in data file URLs — test_datatable_urls","text":"","code":"if (FALSE) { # \\dontrun{ dir <- DPchecker_example(\"BICY_veg\") test_datatable_urls(dir) } # }"},{"path":"/reference/test_datatable_urls_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","title":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","text":"test_datatable_urls_doi() passes data tables URLs properly formatted (.e. \"https://irma.nps.gov/DataStore/Reference/Profile/xxxxxxx\") \"xxxxxx\" identical DOI specified metadata. Fails warning DOI specified metadata. DOI specified metadata, data table URL properly coincide url landing page doi points one table, test fails warning (indicates table failed). data table urls exist, fails error indicates add .","code":""},{"path":"/reference/test_datatable_urls_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","text":"","code":"test_datatable_urls_doi(metadata = load_metadata(directory))"},{"path":"/reference/test_datatable_urls_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_datatable_urls_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","text":"invisible(metadata)","code":""},{"path":"/reference/test_datatable_urls_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests for data table URL formatting & correspondence with DOI — test_datatable_urls_doi","text":"","code":"if (FALSE) { # \\dontrun{ dir <- DPchecker_example(\"BICY_veg\") test_datatable_urls_doi(dir) } # }"},{"path":"/reference/test_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Date Range — test_date_range","title":"Test Date Range — test_date_range","text":"test_date_range() verifies dates dataset consistent date range metadata. HIGHLY recommended provide dates times ISO-8601 formatting: YYYY-MM-DDThh:mm:ss (time can us just YYYY-MM-DD component).","code":""},{"path":"/reference/test_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Date Range — test_date_range","text":"","code":"test_date_range(   directory = here::here(),   metadata = load_metadata(directory),   skip_cols = NA )"},{"path":"/reference/test_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Date Range — test_date_range","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. skip_cols String. Defaults NA. One columns omit test_date_range function.","code":""},{"path":"/reference/test_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Date Range — test_date_range","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_date_range.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Date Range — test_date_range","text":"function checks columns identified date/time metadata. metadata lacks date range, function fails warning. fails error dates contained columns outside temporal coverage specified metadata. date/time format string specified metadata match actual format date CSV, likely fail parse result failing test error. Failure parse indicated results text \"(failed parse)\". test also inform user file columns causing test fail failing (.e. outside date range failed parse). date columns causing test fail associated QA/QC process expected fall outside date range specified data, columns can omitted test using skip_cols.","code":""},{"path":"/reference/test_date_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Date Range — test_date_range","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_date_range(dir) #> ✔ Columns indicated as date/time in metadata are within the stated temporal #>   coverage range."},{"path":"/reference/test_dates_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data and metadata data formats match — test_dates_parse","title":"Test data and metadata data formats match — test_dates_parse","text":"test_dates_parse() examine data columns described containing dates times. Although can handle multiple different formats, ISO-8601 format dates times HIHGLY recommended (ISO YYYY-MM-DDThh:mm:ss just YYYY-MM-DD). function compare format provided data files format indicated metadata. dates indicated metadata, test fails warning. dates formats match, test passes. formats match, test fails error. specific files columns failed indicated results.","code":""},{"path":"/reference/test_dates_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data and metadata data formats match — test_dates_parse","text":"","code":"test_dates_parse(directory = here::here(), metadata = load_metadata(directory))"},{"path":"/reference/test_dates_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test data and metadata data formats match — test_dates_parse","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dates_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test data and metadata data formats match — test_dates_parse","text":"Invisibly returns metadata","code":""},{"path":"/reference/test_dates_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test data and metadata data formats match — test_dates_parse","text":"test_dates_parse() examine EVERY cell column dates hits date format match format specified metadata. large datasets, process can take minute two. even one typo data file, cause function throw error. Frequent source error include viewing dates Excel, can deceptive, typos, changes date format time changing personnel.","code":""},{"path":"/reference/test_dates_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test data and metadata data formats match — test_dates_parse","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_dates_parse(dir) #> ✔ Metadata and data date formatting is in congruence."},{"path":"/reference/test_delimiter.html","id":null,"dir":"Reference","previous_headings":"","what":"Field Delimiter Check — test_delimiter","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() checks metadata file ensures data file field delimiter exactly one character (e.g. \", \").","code":""},{"path":"/reference/test_delimiter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Field Delimiter Check — test_delimiter","text":"","code":"test_delimiter(metadata = load_metadata(here::here()))"},{"path":"/reference/test_delimiter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Field Delimiter Check — test_delimiter","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_delimiter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Field Delimiter Check — test_delimiter","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_delimiter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Field Delimiter Check — test_delimiter","text":"test_delimiter() examines fieldDelimiter element EML (currently EML supported) metadata determine many characters . fieldDelimiter element, test returns error. field delimiter anything exactly one character length, test returns error.","code":""},{"path":"/reference/test_delimiter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Field Delimiter Check — test_delimiter","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_delimiter(meta) #> ✔ Metadata indicates that each data file contains a field delimiter that is a #>   single character"},{"path":"/reference/test_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for presence of a Digital Object Identifier — test_doi","title":"Check for presence of a Digital Object Identifier — test_doi","text":"test_doi() checks whether DOI data package present metadata. currently validate DOI. DOI present, test passes. DOI present, test fails warning.","code":""},{"path":"/reference/test_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"test_doi(metadata = load_metadata(directory))"},{"path":"/reference/test_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for presence of a Digital Object Identifier — test_doi","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for presence of a Digital Object Identifier — test_doi","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for presence of a Digital Object Identifier — test_doi","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_doi(meta) #> ✔ Metadata contains a digital object identifier, \"doi: #>   https://doi.org/10.57830/2295086\"."},{"path":"/reference/test_doi_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DOI formatting — test_doi_format","title":"Check DOI formatting — test_doi_format","text":"test_doi_format() runs basic formatting checks. DOI absent, test fail error. DOI exactly 37 characters contain \"doi: https://doi.org/10.57830/\" test fail error. test passes entry alternateIdentifier field exactly 37 characters long contains \"doi: https://doi.org/10.57830/\". Please note cursory formatting check; check make sure DOI active (probably stage data package authoring). check make sure correct correctly corresponds anything DataStore elsewhere within metadata.","code":""},{"path":"/reference/test_doi_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DOI formatting — test_doi_format","text":"","code":"test_doi_format(metadata = load_metadata(directory))"},{"path":"/reference/test_doi_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check DOI formatting — test_doi_format","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_doi_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DOI formatting — test_doi_format","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_doi_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check DOI formatting — test_doi_format","text":"","code":"if (FALSE) { # \\dontrun{ meta <- test_doi_format(metadata) } # }"},{"path":"/reference/test_dp_abstract.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML abstract — test_dp_abstract","title":"Test EML abstract — test_dp_abstract","text":"test_dp_abstract() inspects EML presence data package abstract. test Fails error abstract absent. abstract present, test fails warning abstract <20 words, >250 words, contains subset common characters indicate improper formatting. Otherwise test passes.","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML abstract — test_dp_abstract","text":"","code":"test_dp_abstract(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_abstract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML abstract — test_dp_abstract","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dp_abstract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML abstract — test_dp_abstract","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_abstract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML abstract — test_dp_abstract","text":"","code":"if (FALSE) { # \\dontrun{ test_dp_abstract() } # }"},{"path":"/reference/test_dp_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Test data package title — test_dp_title","title":"Test data package title — test_dp_title","text":"test_dp_title() tests EML metadata presence data package title. test fails error title absent. test fails warning title > 20 < 5 words. Otherwise, test passes.","code":""},{"path":"/reference/test_dp_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test data package title — test_dp_title","text":"","code":"test_dp_title(metadata = load_metadata(directory))"},{"path":"/reference/test_dp_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test data package title — test_dp_title","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dp_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test data package title — test_dp_title","text":"invisibly returns metadata","code":""},{"path":"/reference/test_dp_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test data package title — test_dp_title","text":"","code":"if (FALSE) { # \\dontrun{ test_dp_title() } # }"},{"path":"/reference/test_dup_meta_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"test_dup_meta_entries() tests see whether duplicate filenames listed data files (EML) metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"test_dup_meta_entries(metadata = load_metadata(here::here()))"},{"path":"/reference/test_dup_meta_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"specifically, test_dup_meta_entries() looks 'physical' elements metadata file, describe data file, asks whether duplicates entries objectName child element, file name data file stored. Duplicate entries result test failing error.","code":""},{"path":"/reference/test_dup_meta_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Metadata for Duplicate Filenames — test_dup_meta_entries","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_dup_meta_entries(meta) #> ✔ Each data file name is used exactly once in the metadata file."},{"path":"/reference/test_fields_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Matching Data/Metadata Fields — test_fields_match","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match() compares attributes dataTable within EML metadata columns corresponding .csv. columns names order, test passes. columns differ, test fails error.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"test_fields_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_fields_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_fields_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_fields_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"test_fields_match briefly checks data files match, really run test_file_name_match() run test.","code":""},{"path":"/reference/test_fields_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Matching Data/Metadata Fields — test_fields_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_fields_match(dir) #> ✔ All columns in data match all columns in metadata."},{"path":"/reference/test_file_descript.html","id":null,"dir":"Reference","previous_headings":"","what":"Test presence of file descriptions — test_file_descript","title":"Test presence of file descriptions — test_file_descript","text":"test_file_descript() tests presence file descriptions (entityDescription) fields. fails error one entityDescription fields empty dataTable. fails error two file descriptions identical. test fails warning file description longer 15 words shorter three words. Otherwise test passes.","code":""},{"path":"/reference/test_file_descript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test presence of file descriptions — test_file_descript","text":"","code":"test_file_descript(metadata = load_metadata(directory))"},{"path":"/reference/test_file_descript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test presence of file descriptions — test_file_descript","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_file_descript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test presence of file descriptions — test_file_descript","text":"invisibly returns metadata","code":""},{"path":"/reference/test_file_descript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test presence of file descriptions — test_file_descript","text":"","code":"if (FALSE) { # \\dontrun{ test_file_descript() } # }"},{"path":"/reference/test_file_name_match.html","id":null,"dir":"Reference","previous_headings":"","what":"File Name Match — test_file_name_match","title":"File Name Match — test_file_name_match","text":"test_file_name_match() checks see whether data files (.csv) within specified directory listed objectName (child physical) element EML metadata file directory, vice versa. Mismatches result test failing error message.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Name Match — test_file_name_match","text":"","code":"test_file_name_match(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_file_name_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Name Match — test_file_name_match","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_file_name_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Name Match — test_file_name_match","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_file_name_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File Name Match — test_file_name_match","text":"directory current working directory specified, test.file_name_match() returns current working directory exit. Note metadata file must follow NPS naming conventions, specifically ending *_metadata.xml. test.file_name_match() assumes number data files directory dataTables metadata file.","code":""},{"path":"/reference/test_file_name_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Name Match — test_file_name_match","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_file_name_match(dir) #> ✔ All data files are listed in metadata and all metadata files names refer to #>   data files."},{"path":"/reference/test_footer.html","id":null,"dir":"Reference","previous_headings":"","what":"Footer Check — test_footer","title":"Footer Check — test_footer","text":"test_footer() checks metadata files determine whether data files contain footer lines .","code":""},{"path":"/reference/test_footer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footer Check — test_footer","text":"","code":"test_footer(metadata = load_metadata(here::here()))"},{"path":"/reference/test_footer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footer Check — test_footer","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_footer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footer Check — test_footer","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_footer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Footer Check — test_footer","text":"footer lines present, data package passes test. footer lines present, data package fails test error user instructed remove footer lines prior data package upload. Currently EML metadata supported.","code":""},{"path":"/reference/test_footer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footer Check — test_footer","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_footer(meta) #> ✔ Metadata indicates data files do not have footers."},{"path":"/reference/test_geographic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Geographic Coverage — test_geographic_cov","title":"Check for Geographic Coverage — test_geographic_cov","text":"test_geographic_cov() checks geographic coverage element present metadata. perform validation geographic coverage information. geographicCoverage element present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"test_geographic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_geographic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Geographic Coverage — test_geographic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_geographic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Geographic Coverage — test_geographic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_geographic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Geographic Coverage — test_geographic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_geographic_cov(meta) #> ✔ Metadata contains geographic coverage element"},{"path":"/reference/test_header_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Check — test_header_num","title":"Header Check — test_header_num","text":"test_header_num() checks metadata files ensure data file contains exactly one header row.","code":""},{"path":"/reference/test_header_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Check — test_header_num","text":"","code":"test_header_num(metadata = load_metadata(here::here()))"},{"path":"/reference/test_header_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Check — test_header_num","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_header_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Header Check — test_header_num","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_header_num.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Header Check — test_header_num","text":"test_header_num() examines numHeaderLines element EML (currently EML supported) metadata determine many header rows . header rows one header row, test fails error. test also fails error information number header rows.","code":""},{"path":"/reference/test_header_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Header Check — test_header_num","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_header_num(meta) #> ✔ Metadata indicates that each data file contains exactly one header row."},{"path":"/reference/test_int_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of Intellectual Rights — test_int_rights","title":"Test for presence of Intellectual Rights — test_int_rights","text":"test_int_rights() tests presence text within intellectualRights element EML formatted metadata. text present, test passes. Otherwise, test fails. test_int_rights() makes attempt parse text test whether properly coincides CUI dissemination codes licenseName metadata. simple presence/absence test.","code":""},{"path":"/reference/test_int_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"test_int_rights(metadata = load_metadata(directory))"},{"path":"/reference/test_int_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of Intellectual Rights — test_int_rights","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_int_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of Intellectual Rights — test_int_rights","text":"invisibly returns metadata","code":""},{"path":"/reference/test_int_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of Intellectual Rights — test_int_rights","text":"","code":"if (FALSE) { # \\dontrun{ test_int_rights() } # }"},{"path":"/reference/test_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for Keywords — test_keywords","title":"Test for Keywords — test_keywords","text":"test_keywords() tests see whether metadata contains least one \"Keywords Set\".","code":""},{"path":"/reference/test_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for Keywords — test_keywords","text":"","code":"test_keywords(metadata = load_metadata(directory))"},{"path":"/reference/test_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for Keywords — test_keywords","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for Keywords — test_keywords","text":"invisilbe(meatadatda)","code":""},{"path":"/reference/test_keywords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for Keywords — test_keywords","text":"","code":"if (FALSE) { # \\dontrun{ test_keywords() } # }"},{"path":"/reference/test_license.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of a license name — test_license","title":"Test for presence of a license name — test_license","text":"test_license() examines licenseName element EML metadata. license name, test fails ab error. license name match list valid license names, test fails. metadata contain valid license name, license name CUI dissemination code agree, test fails error. Otherwise, test passes.  Additionally, license name \"Public Domain\" \"Creative Commons Zero v1.0 Universal\", function produce warning data package public.","code":""},{"path":"/reference/test_license.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of a license name — test_license","text":"","code":"test_license(metadata = load_metadata(directory))"},{"path":"/reference/test_license.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of a license name — test_license","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_license.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of a license name — test_license","text":"invisibly returns metadata","code":""},{"path":"/reference/test_license.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of a license name — test_license","text":"","code":"if (FALSE) { # \\dontrun{ test_license() } # }"},{"path":"/reference/test_metadata_version.html","id":null,"dir":"Reference","previous_headings":"","what":"EML Version Check — test_metadata_version","title":"EML Version Check — test_metadata_version","text":"test_metadata_version() determines whether version metadata supplied meets current criteria NPS data package.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EML Version Check — test_metadata_version","text":"","code":"test_metadata_version(metadata = load_metadata(here::here()))"},{"path":"/reference/test_metadata_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EML Version Check — test_metadata_version","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_metadata_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EML Version Check — test_metadata_version","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_metadata_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EML Version Check — test_metadata_version","text":"currently EML supported. EML must version >= 2.2.0.","code":""},{"path":"/reference/test_metadata_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EML Version Check — test_metadata_version","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_metadata_version(meta) #> ✔ Your EML version is supported."},{"path":"/reference/test_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Examines the Methods section of EML — test_methods","title":"Examines the Methods section of EML — test_methods","text":"test_methods() first extracts methods EML object. methods present, test fails error. methods present, tests asks 1) section longer 20 words? , test fails warning.  2) methods section contain unconventional characters &#13;? , test fails warning. 2) methods section contain additional spaces (two consecuitive spaces)? , test fails warning. tests pass, test whole passes. error warning, users advised use EMLeditor::set_methods() correct problem.","code":""},{"path":"/reference/test_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examines the Methods section of EML — test_methods","text":"","code":"test_methods(metadata = load_metadata(directory))"},{"path":"/reference/test_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examines the Methods section of EML — test_methods","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examines the Methods section of EML — test_methods","text":"invisible(metadata)","code":""},{"path":"/reference/test_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examines the Methods section of EML — test_methods","text":"","code":"if (FALSE) { # \\dontrun{ test_methods() } # }"},{"path":"/reference/test_missing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Looks for undocumented missing data (NAs) — test_missing_data","title":"Looks for undocumented missing data (NAs) — test_missing_data","text":"test_missing_data scans data package common missing data (blanks/empty cells NA cell). blanks NAs, test passes. missing data found properly documented (missingValueCode either \"NA\", \"empty\", \"blank\"), test passes. missing data detected properly documented metadata, test fails error. Commonly, R interpret blank cells missing fill NA. pass test, need either delete columns tables missing data (completely blank), add appropriate missing data code metadata creation (corresponding attributes.txt file). fairly simple test checks NA blanks. Although many common missing data codes (-99999, \"Missing\", \"NaN\" etc) anticipate . running test_missing_data() via run_congruence_checks(), default \"detail_level\" used file-level information undocumented missing values reported condense error message output. attempting identify specifically data undocumented missing values, may helpful run test_missing_data() parameter \"detail_level\" set \"columns\". output list columns within file undocumented missing data. important document missing data? user wants use data missing without explanation acknowledgement, user trust data data package complete.","code":""},{"path":"/reference/test_missing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Looks for undocumented missing data (NAs) — test_missing_data","text":"","code":"test_missing_data(   directory = here::here(),   metadata = load_metadata(directory),   detail_level = \"files\" )"},{"path":"/reference/test_missing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Looks for undocumented missing data (NAs) — test_missing_data","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. detail_level String. Choose either \"files\" \"columns\". Defaults \"files\".","code":""},{"path":"/reference/test_missing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Looks for undocumented missing data (NAs) — test_missing_data","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_missing_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Looks for undocumented missing data (NAs) — test_missing_data","text":"","code":"if (FALSE) { # \\dontrun{ test_missing_data(directory = here::here(),   metadata = load_metadata(directory))  test_missing_data(directory = here::here(),   metadata = load_metadata(directory),   detail_level = \"columns\") } # }"},{"path":"/reference/test_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Examines the additionalInfo elment of EML metadata — test_notes","title":"Examines the additionalInfo elment of EML metadata — test_notes","text":"test_notes() extracts additionalInfo components EML metadata. elements used populate \"Notes\" section DataStore landing page. Notes section blank, test fails warning. notes section contains non-standard characters (&#13;) two consecutive spaces, test fails warning. Otherwise test passes.  warnings, user advised use EMLeditor::set_additional_info() fix additionalInfo section.","code":""},{"path":"/reference/test_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examines the additionalInfo elment of EML metadata — test_notes","text":"","code":"test_notes(metadata = load_metadata(directory))"},{"path":"/reference/test_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examines the additionalInfo elment of EML metadata — test_notes","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examines the additionalInfo elment of EML metadata — test_notes","text":"invisible(metadata)","code":""},{"path":"/reference/test_notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examines the additionalInfo elment of EML metadata — test_notes","text":"","code":"if (FALSE) { # \\dontrun{ test_notes() } # }"},{"path":"/reference/test_numeric_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Numeric Fields — test_numeric_fields","title":"Test Numeric Fields — test_numeric_fields","text":"test_numeric_fields() verifies columns listed numeric metadata free non-numeric data. non-numeric data encountered, test fails error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"test_numeric_fields(   directory = here::here(),   metadata = load_metadata(directory) )"},{"path":"/reference/test_numeric_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Numeric Fields — test_numeric_fields","text":"directory directory data file(s) found (.e. data package). Defaults current working directory. exit, returns current working directory. metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_numeric_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Numeric Fields — test_numeric_fields","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_numeric_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Numeric Fields — test_numeric_fields","text":"\"NA\" missing data codes documented metadata cause test fail. Note test assumes column types metadata intended types, .e., metadata says column text actually numeric, caught test. hand, metadata indicates text column numeric, function generate error.","code":""},{"path":"/reference/test_numeric_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Numeric Fields — test_numeric_fields","text":"","code":"dir <- DPchecker_example(\"BICY_veg\") #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_numeric_fields(dir) #> ✔ Columns indicated as numeric in metadata contain only numeric values and #>   valid missing value codes."},{"path":"/reference/test_orcid_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test creators for presence of an ORCiD — test_orcid_exists","title":"Test creators for presence of an ORCiD — test_orcid_exists","text":"test_orcid_exists() inspect metadata test creator listed individual person (individualName) creators organizations presence ORCiD. ORCiD found individual creators, test passes. individual creator lacks ORCiD, test fails warning users pointed towards EMLeditor::set_creator_orcids() add ORCiDs choose.","code":""},{"path":"/reference/test_orcid_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test creators for presence of an ORCiD — test_orcid_exists","text":"","code":"test_orcid_exists(metadata = load_metadata(directory))"},{"path":"/reference/test_orcid_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test creators for presence of an ORCiD — test_orcid_exists","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_orcid_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test creators for presence of an ORCiD — test_orcid_exists","text":"invisibly returns metadata","code":""},{"path":"/reference/test_orcid_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test creators for presence of an ORCiD — test_orcid_exists","text":"","code":"if (FALSE) { # \\dontrun{ test_orcid_exists() } # }"},{"path":"/reference/test_orcid_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for ORCiD formatting (and presence) — test_orcid_format","title":"Test for ORCiD formatting (and presence) — test_orcid_format","text":"test_orcid_format() inspects metadata looks ORCiDs individual creator (organizations listed creators). individuals correctly formatted ORCiDs (.e 37-character string \"https://orcid.org/xxxx-xxxx-xxxx-xxxx\"), test passes. simple test just looks string length, content. individual improperly formatted ORCiD, test fails error. improperly formatted ORCiDs one ORCiDs missing, test fails warning. Note improperly formatted ORCiDs, test inspect presence/absence individual ORCiDs. full accounting () ORCiDs missing (formatting check), use test_orcid_exists.","code":""},{"path":"/reference/test_orcid_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for ORCiD formatting (and presence) — test_orcid_format","text":"","code":"test_orcid_format(metadata = load_metadata(directory))"},{"path":"/reference/test_orcid_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for ORCiD formatting (and presence) — test_orcid_format","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_orcid_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for ORCiD formatting (and presence) — test_orcid_format","text":"invisibly returns metadata","code":""},{"path":"/reference/test_orcid_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for ORCiD formatting (and presence) — test_orcid_format","text":"","code":"if (FALSE) { # \\dontrun{ test_orcid_format() } # }"},{"path":"/reference/test_orcid_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"test_orcid_match() evaluate Creators individuals (organizations). ORCiD supplied, function attempt access indicated ORCiD profile test whether last name indicated ORCiD profile matches surName indicated Metadata. surNames match ORCiD profiles, test passes. surName match indicated ORCID profile, test fails error.","code":""},{"path":"/reference/test_orcid_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"","code":"test_orcid_match(metadata = load_metadata(directory))"},{"path":"/reference/test_orcid_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_orcid_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"invisibly returns metadata","code":""},{"path":"/reference/test_orcid_match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"Potential reasons failing test include entered wrong ORCiD metadata, improperly formatted ORCiD metadata (listed https://orcid.org/xxxx-xxxx-xxxx-xxxx - see test_orcid_format()), set ORCiD profile \"private\" (case function access name associated profile) differences ORCiD profile name name metadata (maiden vs. married name, transposing given surnames, variation surName spelling).","code":""},{"path":"/reference/test_orcid_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests whether metadata creator matches the ORCiD profile — test_orcid_match","text":"","code":"if (FALSE) { # \\dontrun{ test_orcid_match() } # }"},{"path":"/reference/test_orcid_resolves.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","title":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","text":"test_orcid_resolves() examine ORCiDs supplied individual Creators (organizations). ORCiD supplied consists URL leads valid ORCiD profile, test passes. ORCiD supplied URL resolves valid ORCiD profile - either ORCiD exist ORCiD supplied incorrect format, test fails error. test examine Creators associated ORCiDs; ORCiDs provided test return pass fail.","code":""},{"path":"/reference/test_orcid_resolves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","text":"","code":"test_orcid_resolves(metadata = load_metadata(directory))"},{"path":"/reference/test_orcid_resolves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_orcid_resolves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","text":"invisibly returns metadata","code":""},{"path":"/reference/test_orcid_resolves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether supplied Creator ORCiDs resolve to a valid ORCiD profile — test_orcid_resolves","text":"","code":"if (FALSE) { # \\dontrun{ test_orcid_resolves() } # }"},{"path":"/reference/test_pii_data_emails.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data files for PII (emails) — test_pii_data_emails","title":"Check data files for PII (emails) — test_pii_data_emails","text":"test_pii_data_emails() tool help identify emails data files (.csv) may constitute Personally Identifiable Information (PII). tool guaranteed find emails, can definitely tell whether email constitutes PII . test_pii_data_emails() reads .csv file specified directory. uses regular expressions extract emails (truth, hard test regex possible emails chance miss one ). emails end anything .gov, function fails warning lists offending files emails contain. emails data files emails data files end .gov, assumed public emails function passes without listing emails.","code":""},{"path":"/reference/test_pii_data_emails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data files for PII (emails) — test_pii_data_emails","text":"","code":"test_pii_data_emails(directory = here::here())"},{"path":"/reference/test_pii_data_emails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data files for PII (emails) — test_pii_data_emails","text":"directory String. directory data package resides. Defaults current working directory.","code":""},{"path":"/reference/test_pii_data_emails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data files for PII (emails) — test_pii_data_emails","text":"String","code":""},{"path":"/reference/test_pii_data_emails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check data files for PII (emails) — test_pii_data_emails","text":"","code":"if (FALSE) { # \\dontrun{ test_pii_data_emails() } # }"},{"path":"/reference/test_pii_meta_emails.html","id":null,"dir":"Reference","previous_headings":"","what":"Check metadata for PII (emails) — test_pii_meta_emails","title":"Check metadata for PII (emails) — test_pii_meta_emails","text":"test_pii_meta_emails() tool help identify emails metadata may constitute Personally Identifiable Information (PII). tool guaranteed find emails, can definitely tell whether email constitutes PII . test_pii_meta_emails() reads *_metadata.xml file specified directory. uses regular expressions extract emails (truth, hard test regex possible emails chance miss one ). emails metadata, function fails warning (probably email contact somewhere metadata). emails end anything .gov, function fails warning lists offending emails. emails metadata end .gov, assumed public emails function passes without listing emails.","code":""},{"path":"/reference/test_pii_meta_emails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check metadata for PII (emails) — test_pii_meta_emails","text":"","code":"test_pii_meta_emails(directory = here::here())"},{"path":"/reference/test_pii_meta_emails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check metadata for PII (emails) — test_pii_meta_emails","text":"directory String. directory metadata file resides. Defaults current working directory.","code":""},{"path":"/reference/test_pii_meta_emails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check metadata for PII (emails) — test_pii_meta_emails","text":"invisible(metadata)","code":""},{"path":"/reference/test_pii_meta_emails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check metadata for PII (emails) — test_pii_meta_emails","text":"","code":"if (FALSE) { # \\dontrun{ test_pii_meta_emails() } # }"},{"path":"/reference/test_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for a DataStore project — test_project","title":"Test for a DataStore project — test_project","text":"Test DataStore project","code":""},{"path":"/reference/test_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for a DataStore project — test_project","text":"","code":"test_project(metadata = load_metadata(directory))"},{"path":"/reference/test_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for a DataStore project — test_project","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for a DataStore project — test_project","text":"invisible(metadata)","code":""},{"path":"/reference/test_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for a DataStore project — test_project","text":"","code":"if (FALSE) { # \\dontrun{ test_project() } # }"},{"path":"/reference/test_pub_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test publication date presence and ISO-8601 formatting — test_pub_date","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"test_pub_date() tests presence ISO-8601 formatting publication date. Also tests whether publication date within reasonable bounds; .e. date prior beginning data package Reference Type (2022) future year. publication date missing improperly formatted, test fails error. publication date outside reasonable range, test fails warning. Otherwiset test passes.","code":""},{"path":"/reference/test_pub_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"test_pub_date(metadata = load_metadata(directory))"},{"path":"/reference/test_pub_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_pub_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"invisibly returns metadata","code":""},{"path":"/reference/test_pub_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test publication date presence and ISO-8601 formatting — test_pub_date","text":"","code":"if (FALSE) { # \\dontrun{ meta <- load_metadata(DPchecker_example(\"BICY_Veg\")) test_pub_date(meta) } # }"},{"path":"/reference/test_publisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Publisher — test_publisher","title":"Check for Publisher — test_publisher","text":"test_publisher() checks publisher information present metadata, option require valid NPS publisher information. publisher information present, test passes. publisher information absent, test fails error. require_nps set TRUE (defaults FALSE), test also ensure valid NPS publisher information present. case, even publisher element present, test fail error unless publisher NPS (publisher fields exactly match expected information NPS data packages).","code":""},{"path":"/reference/test_publisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Publisher — test_publisher","text":"","code":"test_publisher(metadata = load_metadata(directory), require_nps = FALSE)"},{"path":"/reference/test_publisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Publisher — test_publisher","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory. require_nps TRUE, throw error publisher information correct NPS published data.","code":""},{"path":"/reference/test_publisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Publisher — test_publisher","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_publisher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Publisher — test_publisher","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_publisher(meta) #> ✔ Metadata contains publisher element."},{"path":"/reference/test_publisher_city.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher city — test_publisher_city","title":"Test EML metadata for publisher city — test_publisher_city","text":"test_publisher_city() inspects publisher address EML metadata. fails error city element empty. fails warning \"Fort Collins\". test passes \"Fort Collins\"","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"test_publisher_city(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_city.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher city — test_publisher_city","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_publisher_city.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher city — test_publisher_city","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_city.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher city — test_publisher_city","text":"","code":"if (FALSE) { # \\dontrun{ test_publisher_city() } # }"},{"path":"/reference/test_publisher_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests EML metadata for the publisher name — test_publisher_name","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"Tests EML metadata publisher name","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"test_publisher_name(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_publisher_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"test_publisher_name() test presence data package publisher name. fails error publisher name missing, fails warning publisher name \"National Park Service\" (expected rare). Passes test publisher name \"National Park Service\"","code":""},{"path":"/reference/test_publisher_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests EML metadata for the publisher name — test_publisher_name","text":"","code":"if (FALSE) { # \\dontrun{ test_publisher_name() } # }"},{"path":"/reference/test_publisher_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Test EML metadata for publisher state — test_publisher_state","title":"Test EML metadata for publisher state — test_publisher_state","text":"test_publisher_state() inspects publisher address EML metadata. test faisl error administrativeArea (state) element empty. test fails warning \"CO\" (, expected exceedingly rare). test passes \"CO\".","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"test_publisher_state(metadata = load_metadata(directory))"},{"path":"/reference/test_publisher_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test EML metadata for publisher state — test_publisher_state","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_publisher_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test EML metadata for publisher state — test_publisher_state","text":"invisibly returns metadata","code":""},{"path":"/reference/test_publisher_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test EML metadata for publisher state — test_publisher_state","text":"","code":"if (FALSE) { # \\dontrun{ test_publisher_state() } # }"},{"path":"/reference/test_storage_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests for attribute storage type — test_storage_type","title":"Tests for attribute storage type — test_storage_type","text":"test_storage_type() checks see number attributes (attributeName) storageTypes metadata. Equal numbers elements pass; unequal numbers fail test error. test_storage_type() attempt verify number storageType elements matches number columns data package data files (functionality, use test_fields_match()). test_storage_type() also verifies storageType valid; .e. member accepted list possible storage types. Currently : string, float, date, factor, dateTime, characters. Validity test based solely observed ezEML/EAL output (theory string storageType schema-valid). Invalid storageTypes result warning. test_storage_type() attempt verify value storageType logically matches type data corresponding column.","code":""},{"path":"/reference/test_storage_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests for attribute storage type — test_storage_type","text":"","code":"test_storage_type(metadata = load_metadata(directory))"},{"path":"/reference/test_storage_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests for attribute storage type — test_storage_type","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_storage_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests for attribute storage type — test_storage_type","text":"invisibly returns metadata","code":""},{"path":"/reference/test_storage_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests for attribute storage type — test_storage_type","text":"","code":"if (FALSE) { # \\dontrun{ test_storage_type() } # }"},{"path":"/reference/test_taxonomic_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Taxonomic Coverage test — test_taxonomic_cov","title":"Check for Taxonomic Coverage test — test_taxonomic_cov","text":"'test_taxnomomic_cov()` checks whether taxonomic coverage element present metadata. perform validation taxonomic coverage information. taxonomic coverage present, test passes. absent, test fails warning.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Taxonomic Coverage test — test_taxonomic_cov","text":"","code":"test_taxonomic_cov(metadata = load_metadata(directory))"},{"path":"/reference/test_taxonomic_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Taxonomic Coverage test — test_taxonomic_cov","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Taxonomic Coverage test — test_taxonomic_cov","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_taxonomic_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Taxonomic Coverage test — test_taxonomic_cov","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_taxonomic_cov(meta) #> ✔ Metadata contains taxonomic coverage element."},{"path":"/reference/test_valid_fieldnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Field Names for Invalid Characters — test_valid_fieldnames","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"test_valid_fieldnames() checks field names (e.g data column names) metadata contain invalid special characters. underscores alphanumeric characters permitted, names must begin letter. invalid column names exist, test fail warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"test_valid_fieldnames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_fieldnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"run test_fields_match() run function, since function checks field names metadata.","code":""},{"path":"/reference/test_valid_fieldnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Field Names for Invalid Characters — test_valid_fieldnames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_fieldnames(meta) #> ✔ Field names begin with a letter and do not contain spaces or special #>   characters."},{"path":"/reference/test_valid_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Test File Names for Invalid Characters — test_valid_filenames","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"test_valid_filenames() checks file names metadata contain invalid special characters. underscores, hyphens, alphanumeric characters permitted, names must begin letter. Currently, invalid filenames result test failing warning, otherwise test passes.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"test_valid_filenames(metadata = load_metadata(here::here()))"},{"path":"/reference/test_valid_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_valid_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"run test_file_name_match() run function, since function checks file names metadata.","code":""},{"path":"/reference/test_valid_filenames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test File Names for Invalid Characters — test_valid_filenames","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_valid_filenames(meta) #> ✔ File names begin with a letter and do not contain spaces or special #>   characters."},{"path":"/reference/test_validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Metadata Schema — test_validate_schema","title":"Validate Metadata Schema — test_validate_schema","text":"test_validate_schema() inspects metadata object loaded R determines whether schema-valid. test fails, functio produces error message.","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"test_validate_schema(metadata = load_metadata(here::here()))"},{"path":"/reference/test_validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Metadata Schema — test_validate_schema","text":"metadata metadata object returned load_metadata. parameter provided, defaults calling load_metadata current project directory.","code":""},{"path":"/reference/test_validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Metadata Schema — test_validate_schema","text":"Invisibly returns metadata.","code":""},{"path":"/reference/test_validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Metadata Schema — test_validate_schema","text":"currently, EML supported. now just wrapper form EML::eml_validate().","code":""},{"path":"/reference/test_validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Metadata Schema — test_validate_schema","text":"","code":"meta <- load_metadata(DPchecker_example(\"BICY_veg\")) #> Data are provided for example use only. Do not assume that they are complete, accurate, or up to date. test_validate_schema(meta) #> ✔ Your metadata is schema valid."},{"path":[]},{"path":"/news/index.html","id":"id_2025-1-1-0","dir":"Changelog","previous_headings":"","what":"2025-04-23","title":"DPchecker 1.1.0 (under development)","text":"Remove test_public_points() function. DataStore previously made GPS coordinates public, even data files restricted-access, function written alert users fact. DataStore now applies access rules GPS coordinates data files, check longer needed.","code":""},{"path":[]},{"path":"/news/index.html","id":"id_2025-1-0-1","dir":"Changelog","previous_headings":"","what":"2025-04-24","title":"DPchecker 1.0.1","text":"add function test_datatable_url_attributes test appropriate attribute xml designation metadata urls. Added unit tests test_datatable_url_attributes, test_datatable_urls_doi, test_datatable_urls","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-1","dir":"Changelog","previous_headings":"","what":"2025-04-16","title":"DPchecker 1.0.1","text":"remove arcticdatautils dependency replace functionality equivalent functions EMLeditor reduce total number package dependencies.","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-2","dir":"Changelog","previous_headings":"","what":"2025-04-01","title":"DPchecker 1.0.1","text":"fix bug caused test_datatable_urls_doi produce unexpected errors checking metadata generated ezEML.","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-3","dir":"Changelog","previous_headings":"","what":"2025-03-25","title":"DPchecker 1.0.1","text":"fix bug caused several functions fail detect certain .csv files","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-4","dir":"Changelog","previous_headings":"","what":"2025-03-10","title":"DPchecker 1.0.1","text":"updated license MIT, works JOSS, NPS, R! ## 2025-03-10 Updated license OSI-approved “Zero-Clause BSD” support JOSS submission. update R-CMD-check.yml include error-: ‘“error”’. allow R CMD CHECK pass warnings/notes fail actual errors.","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-5","dir":"Changelog","previous_headings":"","what":"2025-03-07","title":"DPchecker 1.0.1","text":"Add test_content_units() function test presence NPS content unit links. Add test_content_units() function list functions run run_congruence_checks(). Add unit tests test_content_units(). Add documentation test_content_units() Articles. Add EMLeditor dependency support unit tests test_content_units(). ## 2025-02-25 Update CONTRIBUTING.md ## 2025-02-22 Add CONTRIBUTING.md file.","code":""},{"path":"/news/index.html","id":"id_2025-1-0-1-6","dir":"Changelog","previous_headings":"","what":"2025-02-07","title":"DPchecker 1.0.1","text":"Bug fix test_int_rights: update CC0 license name text match EMLeditor’s input DataStore backend.","code":""},{"path":[]},{"path":"/news/index.html","id":"id_2024-1-0-0","dir":"Changelog","previous_headings":"","what":"2024-11-05","title":"DPchecker 1.0.0","text":"Bugfix test_storage_type() data packages built ezEML 1 .csv file. Add test_project() function test DataStore projects. Add unit tests optional eml elements Update documentation reflect new test_project() function.","code":""},{"path":"/news/index.html","id":"dpchecker-034","dir":"Changelog","previous_headings":"","what":"DPchecker 0.3.4","title":"DPchecker 0.3.4","text":"2024-07-29 * Update license CC0 * Bug fix test_missing_data() 2024-06-24 * Fixed bug test_missing_data() order files listed metadata match order files produced list.files() function evaluate wrong file produce inadvertent unhelpful errors. 2024-02-05 * Fix bug test_date_range() adding UTC temporalCoverage * test_missing_data() now also handles missing data codes “blank” “empty”. * Update test_missing_data() default flag whole files, column undocumented missing data. condenses error output running run_congruence_checks(). trouble shooting attempting pinpoint data lack missing values, test_missing_data() can run parameter detail_level = “columns”. 2024-01-26 * Bugfixes test_dates_parse() test_date_range(): now ignore files times dates date times. * Bugfixes test_valid_fieldnames(), test_valid_filenames(), test_numeric_fields(), test_dates_parse(), test_date_range() - bug; must something deep dependency chain changed. * Bugfix attempt test_fields_match() reportedly needs testing * Add function test_missing_data() scans data NAs documented metadata","code":""},{"path":"/news/index.html","id":"dpchecker-033","dir":"Changelog","previous_headings":"","what":"DPchecker 0.3.3","title":"DPchecker 0.3.3","text":"Bug fixes test_date_range() test_dates_parse(). Adjusted test_datatable_urls() test_datatable_urls_doi() work properly data table urls present metadata. Move convert_datetime_format QCkit; add QCkit re-export DPchecker Updated tabular_data_congruence.R speed stability per codefactor suggests","code":""},{"path":"/news/index.html","id":"dpchecker-032","dir":"Changelog","previous_headings":"","what":"DPchecker 0.3.2","title":"DPchecker 0.3.2","text":"Adjusted test_date_range() can handle data columns contain dates times. Times truncated midnight data collected first day indicated considered “range” data collected last day indicated considered “range”. Added test_public_points() list functions DPchecker.Rmd file. Added test_public_points() list functions run run_congruence_checks(). Added test_public_points() function test whether metadata contains GPS coordinates package public. Added test_keywords() list function DPchecker.Rmd file. Added test_keywords() list functions run run_congruence_checks(). Added new function, test_keywords() test presence keywords metadata; something required EML extraction DataStore. Updated test_valid_filenames() accept filenames hyphens (addition filenames alpha-numerics underscore). Filenames still must start letter. Added test_dates_parse() function list functions DPchecker.Rmd file. Added test_dates_parse() function list functions run function run_congruence_checks() called. Added function test_dates_parse() test whether date formats supplied metadata match values supplied data files. Added NEWS.md file track changes DPchecker R package.","code":""}]
